import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { robotNextTurn } from '../app/component/fourDots/fourDotsAPI';
import { updateGameState } from './gameState';

import { initialState } from './initialState';


//get robot turn from api 
export const fetchRobotAction = createAsyncThunk(
    'gameState/robotNextTurn', async (matrixState) => {
      const response = await robotNextTurn(matrixState);
      return response;
    }
  );

  export const gameSlice = createSlice({
    name: 'gameState',
    initialState,

    reducers: {
        //choose turn for player between player and robot && single player or multiple player && restart the game state
        firstTurn: (state, action) => { // accept action as object ex. {singlePlayer: false, player: 'me'}
            state = {...initialState};
            state.player = action.payload.player || 'me';
            state.singlePlayer = action.payload.singlePlayer;
            return state;
        },
         //if coulmn is available update state according
         getAvailableColumn : (state, action) => {
            var availableSpace = state.column[action.payload];
            if((availableSpace > -1) && (state.gameState !== 'win') && (state.gameState !== 'draw')) {//if current click is valid
                state.gameState = 'playing';//update the game state 
                state.column[action.payload] = availableSpace - 1; //update available column
                state.gridState[action.payload][availableSpace] = state.player; // update dot color
                state.matrixState = [...state.matrixState, action.payload]; // update current player
                //calculate game state and update state
                 state = updateGameState(state, action.payload, availableSpace);
                
                 //switch player if game is in playing state
                  //if single player game will be between me vs player2
                  //if multiplayer then game will be between me vs robot
                  if(state.gameState === 'playing'){
                    if(state.player === 'me'){
                      var nextPlayer = state.singlePlayer? 'robot':'Player 2';
                      state.player = nextPlayer;
                    } else {
                      state.player = 'me'
                    }
                  }
                } 
                if(availableSpace === -1) state.gameState = 'invalid move';
                return state;
          }
      },
      // The `extraReducers` field lets the slice handle actions defined elsewhere,
      // including actions generated by createAsyncThunk or in other slices.
      extraReducers: builder => {
        builder
        .addCase(fetchRobotAction.fulfilled, (state, action) => {
            var currPlayer = state.player; 
            var getRototColumn = action.payload[action.payload.length - 1];
            if(currPlayer === 'robot') gameSlice.caseReducers.getAvailableColumn(state, {payload:getRototColumn});
            return state;
          })
          .addCase(fetchRobotAction.rejected, (state, action) => {
            state.errorState = action.payload;
            return state;
          });
      }
  })
//get the current state 
export const getColumn = (state) => state.gameState.column;
export const selectPlayer = (state) => state.gameState.player;
export const getMatrixState = (state) => state.gameState.matrixState;
export const isSinglePlayer = (state) => state.gameState.singlePlayer;
export const getGridState = (state) => state.gameState.gridState;
export const getGameState = (state) => state.gameState.gameState;
export const getErrorState = (state) => state.gameState.errorState;
export const getWinner = (state) => state.gameState.winner;
export const getWinnerIndexes = (state) => state.gameState.winnerIndexes;
  
export const {firstTurn, getAvailableColumn } = gameSlice.actions;

export default gameSlice.reducer;