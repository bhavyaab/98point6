import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { robotNextTurn } from '../app/component/fourDots/fourDotsAPI';
import { updateGameState } from './gameState';

import { initialState } from './initialState';


//get robot turn from api 
  export const fetchRobotAction = createAsyncThunk(
    'gameState/robotNextTurn',
    async (currState) => {
      const response = await robotNextTurn(currState);
      console.log('response == ', response)
      return response.data;
    }
  );

  export const fourDotSlice = createSlice({
    name: 'gameState',
    initialState,

    reducers: {
       //choose if it is single player or multiple player
       playSingle: (state, action) => {
         state.singlePlayer = action.payload;
       },
        //choose turn for player between player and robot
        firstTurn: (state, action) => {
            state.firstTurn = action.payload;
            state.player = action.payload;
            state.gameState = 'playing'
        },
         //if coulmn is available 
         getAvailableColumn : (state, action) => {
            var availableSpace = state.column[action.payload];
            if(availableSpace > -1) {
                state.gameState = 'playing';
                state.column[action.payload] = availableSpace - 1; //update available column
                state.gridState[action.payload][availableSpace]['player'] = state.player; // update dot color
                state.currState = [...state.currState, action.payload]; // update current player
                //calculate game state
                  state = updateGameState(state, action.payload, state.player, availableSpace);
                  
                  //switch player if game is in playing state
                  //if single player game will be between me vs player2
                  //if multiplayer then game will be between me vs robot
                  if(state.gameState === 'playing'){
                    if(state.player === 'me'){
                      var nextPlayer = state.singlePlayer? 'robot':'Player 2';
                      state.player = nextPlayer;
                  } else {
                      state.player = 'me'
                  }
                  }
                } else {
                  state.gameState = 'invalid move';
                  return state;
                }
             return state;
          },
          reStartGame: (state, action) => {
            state = {...initialState};
            state.player = action.payload;
            return state;
          },
          // when player click on column it will put a disc into that column if valid
        updateMatrix: (state, action) => {

        },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchRobotAction.pending, (state, action) => {
        state.robotStatus = 'panding';
      });
    builder.addCase(fetchRobotAction.fulfilled, (state, action) => {
        state.robotStatus = 'idle';
        return state.currState = action.payload;
      });
      builder.addCase(fetchRobotAction.rejected, (state, action) => {
        state.robotStatus = 'error';
        return state.errorState = action.payload;
      });
  },
}
  })
//get the current state 
export const getColumn = (state) => state.gameState.column;
export const selectPlayer = (state) => state.gameState.player;
export const getCurrState = (state) => state.gameState.currState;
export const isSinglePlayer = (state) => state.gameState.singlePlayer;
export const getGridState = (state) => state.gameState.gridState;
export const getGameState = (state) => state.gameState.gameState;
export const getErrorState = (state) => state.gameState.errorState;
export const getWinner = (state) => state.gameState.winner;
export const getWinnerIndexes = (state) => state.gameState.winnerIndexes;
  
export const { firstTurn, playSingle, updateMatrix, getAvailableColumn, reStartGame } = fourDotSlice.actions;

export default fourDotSlice.reducer;